import numpy as np

# Load an essential matrix E generated by the C++ program
def load_E(name_matrix):
    file = open(name_matrix, "r")

    E = np.empty([3,3])
    for i in range(3):
        line = file.readline()
        tab = line[1:-2].split(", ")
        for j in range(3):
            E[i,j] = tab[j]
    return E

def compute_new_F(E, K):
    return np.dot( np.dot(np.transpose(K),E) , K )


# Epipolar lines compute with new_F
def draw_epipolar_line_new_F(new_F, nb_elements, points1, points2, colors, img1, img2, ax1, ax2):

    for i in range(nb_elements):

        # We obtain equations of both epipolar lines
        a1 = new_F[0][0]*points2[i][0] + new_F[0][1]*points2[i][1] + new_F[0][2]
        b1 = new_F[1][0]*points2[i][0] + new_F[1][1]*points2[i][1] + new_F[1][2]
        c1 = new_F[2][0]*points2[i][0] + new_F[2][1]*points2[i][1] + new_F[2][2]
        
        a2 = new_F[0][0]*points1[i][0] + new_F[1][0]*points1[i][1] + new_F[2][0]
        b2 = new_F[0][1]*points1[i][0] + new_F[1][1]*points1[i][1] + new_F[2][1]
        c2 = new_F[0][2]*points1[i][0] + new_F[1][2]*points1[i][1] + new_F[2][2]

        x1 = np.linspace(0, img1.size[0], img1.size[1])
        y1 = (-a1*x1 - c1) / b1
        ax1.plot(x1, y1, color=colors[i])

        x2 = np.linspace(0, img2.size[0], img2.size[1])
        y2 = (-a2*x2 - c2) / b2
        ax2.plot(x2, y2, color=colors[i])
